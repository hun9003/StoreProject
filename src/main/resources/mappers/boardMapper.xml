<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.muesli.mapper.BoardMapper">

<!--    게시판 리스트-->
    <select id="getBoardList" resultType="board">
        SELECT * FROM board ORDER BY brd_order
    </select>

<!--    게시판 정보 호출 -->
    <select id="getBoard" resultType="board">
        SELECT * FROM board WHERE brd_id = #{brd_id}
    </select>

<!--    게시판 그룹별 가장 높은 순서 호출-->
    <select id="getMaxOrder" resultType="int">
        SELECT MAX(brd_order) FROM board WHERE bgr_id = #{bgr_id}
    </select>

<!--    게시판 이름 가져오기-->
    <select id="getBoardName" resultType="board">
        SELECT brd_id, brd_key, brd_name FROM board WHERE brd_key = #{brd_key}
    </select>

<!--    게시물 리스트 갯수 가져오기-->
    <select id="getPostCount" resultType="int">
        SELECT COUNT(post_id) FROM post
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="search_type != null">
                <choose>
                    <when test="search_type eq 'title'">
                        AND post_title LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                    <when test="search_type eq 'content'">
                        AND post_content LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                    <when test="search_type eq 'title_content'">
                        AND post_title LIKE CONCAT('%', #{search_content} ,'%') OR post_content LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                    <when test="search_type eq 'nickname'">
                        AND post_nickname LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                </choose>
            </if>
        <if test="isOnlyDel != null">
            AND post_del = #{isOnlyDel}
        </if>
        <if test="brd_id != null">
            AND brd_id = #{brd_id}
        </if>
        </trim>
    </select>
<!--    게시물 리스트 가져오기-->
    <select id="getPostList" resultType="post">
        SELECT * FROM post
        <trim prefix="WHERE" prefixOverrides="AND|OR">
            <if test="search_type != null">
                <choose>
                    <when test="search_type eq 'title'">
                        AND post_title LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                    <when test="search_type eq 'content'">
                        AND post_content LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                    <when test="search_type eq 'title_content'">
                        AND post_title LIKE CONCAT('%', #{search_content} ,'%') OR post_content LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                    <when test="search_type eq 'nickname'">
                        AND post_nickname LIKE CONCAT('%', #{search_content} ,'%')
                    </when>
                </choose>
            </if>
        <if test="isOnlyDel != null">
            AND post_del = #{isOnlyDel}
        </if>
        <if test="brd_id != null">
            AND brd_id = #{brd_id}
        </if>
        </trim>
        <trim prefix="ORDER BY">
            <if test="order_type != null">
                <choose>
                    <when test="order_type eq 'new'">
                        post_datetime DESC
                    </when>
                    <when test="order_type eq 'old'">
                        post_datetime DESC
                    </when>
                    <when test="order_type eq 'like'">
                        post_like DESC
                    </when>
                    <when test="order_type eq 'hit'">
                        post_hit DESC
                    </when>
                    <when test="order_type eq 'comment'">
                        post_comment_count DESC
                    </when>
                </choose>
            </if>
        </trim>
        LIMIT #{pageBean.startRow},#{pageBean.pageSize};
    </select>
<!--    게시판 생성-->
    <insert id="insertBoard">
        INSERT INTO board VALUES (null, #{bgr_id}, #{brd_key}, #{brd_name}, #{brd_mobile_name}, #{brd_order}, #{brd_search})
    </insert>

<!--    게시판 수정-->
    <update id="updateBoard">
        UPDATE board SET brd_name = #{brd_name}, brd_mobile_name = #{brd_mobile_name} WHERE brd_id = #{brd_id}
    </update>

    <!--    대상 게시판 순서 변경-->
    <update id="updateOtherOrder">
        UPDATE board SET brd_order = #{boardBean.brd_order}
        WHERE brd_order =
        <choose>
            <when test="isUp">#{boardBean.brd_order}-1</when>
            <otherwise>#{boardBean.brd_order}+1</otherwise>
        </choose>
            AND bgr_id = #{boardBean.bgr_id}
    </update>

    <!--    해당 메뉴 순서 변경-->
    <update id="updateOrder">
        UPDATE board SET brd_order = #{boardBean.brd_order}
        <choose>
            <when test="isUp">-1</when>
            <otherwise>+1</otherwise>
        </choose>
        WHERE brd_id = #{boardBean.brd_id}
    </update>

    <!--    메뉴 삭제시 뒷 순서 한 칸씩 앞당기기-->
    <update id="pushBoardOrder">
        UPDATE board SET brd_order = brd_order-1
        WHERE brd_order > #{brd_order}
        AND bgr_id = #{bgr_id}
    </update>

<!--    게시판 삭제-->
    <delete id="deleteBoard">
        DELETE FROM board WHERE brd_id = #{brd_id}
    </delete>


<!--    ========================= 게시물 =======================-->
    <select id="getPost" resultType="post">
        SELECT * FROM post WHERE post_id = #{post_id}
    </select>

    <insert id="createPost">
        INSERT INTO post VALUES (null, #{brd_id}, #{post_title}, #{post_content}, #{post_category}, #{mem_id}
                                , #{post_userid}, #{post_nickname}, #{post_datetime}, #{post_updated_datetime}, #{post_update_mem_id}, #{post_comment_count}
                                , #{post_comment_updated_datetime}, #{post_secret}, #{post_notice}, #{post_hit}, #{post_like}, #{post_dislike}
                                , #{post_ip}, #{post_blame}, #{post_device}, #{post_file}, #{post_image}, #{post_del})
    </insert>

    <update id="hitPost">
        UPDATE post SET post_hit = post_hit+1 WHERE post_id = #{post_id}
    </update>

    <update id="updatePost">
        UPDATE post SET post_title = #{post_title}, post_content = #{post_content}, post_updated_datetime = #{post_updated_datetime} WHERE post_id = #{post_id}
    </update>

    <update id="deletePost">
        UPDATE post SET post_del = 1 WHERE post_id = #{post_id}
    </update>

    <update id="setLikeCount">
        UPDATE post set post_like = #{post_like} WHERE post_id = #{post_id}
    </update>

    <update id="setHateCount">
        UPDATE post set post_dislike = #{post_dislike} WHERE post_id = #{post_id}
    </update>

<!--    좋아요 기능-->

    <select id="getLiked" resultType="like">
        SELECT * FROM liked WHERE mem_id = #{member.mem_id}
                              AND target_type = 1
                              AND target_id = #{post.post_id}
    </select>

    <select id="getLikeCount" resultType="int">
        SELECT count(lik_id) FROM liked WHERE target_type = 1
                                    AND target_id = #{post_id}
                                    AND lik_type = 1
    </select>

    <select id="getHateCount" resultType="int">
        SELECT count(lik_id) FROM liked WHERE target_type = 1
                                          AND target_id = #{post_id}
                                          AND lik_type = 2
    </select>

    <insert id="insertLike">
        INSERT INTO liked VALUES (null, #{post.post_id}, 1, #{post.brd_id}, #{member.mem_id}, #{post.mem_id},
                                  <choose>
                                      <when test="type eq 'like'">
                                          1
                                      </when>
                                      <otherwise>
                                          2
                                      </otherwise>
                                  </choose>
                                  , #{ip})
    </insert>

    <delete id="deleteLike">
        DELETE FROM liked WHERE lik_id = #{like.lik_id}
    </delete>

<!--    댓글관련-->
    <update id="updateCommentCount">
        UPDATE post SET post_comment_count = #{post_comment_count}, post_updated_datetime = #{post_updated_datetime} WHERE post_id = #{post_id}
    </update>
</mapper>
