<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.muesli.mapper.MemberMapper">
<!-- 아이디 중복체크 -->
	<select id="getMember_userid" resultType="member">
		SELECT mem_id FROM member WHERE mem_userid = #{mem_userid}
	</select>
<!-- 	닉네임 중복체크 -->
	<select id="getMember_nickname" resultType="member">
		SELECT mem_id FROM member WHERE mem_nickname = #{mem_nickname}
	</select>
<!-- 	회원 조회 -->
	<select id="getMember" resultType="member">
		SELECT * FROM member 
		<trim prefix="WHERE" prefixOverrides="AND|OR">
		<if test="mem_userid != null">
		AND mem_userid = #{mem_userid} 
		</if>
		<if test="mem_password != null">
		AND mem_password = #{mem_password}
		</if>
		<if test="mem_id != null and mem_password == null">
		AND mem_id = #{mem_id}
		</if>
		</trim>
	</select>

<!--	이메일 코드 확인-->
	<select id="getMemberEmailCode" resultType="emailCode">
		SELECT * FROM member_auth_email WHERE mem_id = #{mem_id}
	</select>

<!--	이메일 코드 체크-->
	<select id="checkMemberEmailCode" resultType="emailCode">
		SELECT * FROM member_auth_email WHERE mem_id = #{mem_id} AND mae_key = #{mae_key}
	</select>


<!-- 	회원가입 -->
	<insert id="insertMember">
		INSERT INTO member
		VALUES (null, #{mem_userid}, #{mem_email}, #{mem_password}, #{mem_nickname},
		#{mem_level}, #{mem_point}, #{mem_phone}, #{mem_gender}, #{mem_receive_email},
		#{mem_receive_sms}, #{mem_denied}, #{mem_email_cert}, #{mem_register_datetime}, #{mem_register_ip},
		#{mem_lastlogin_datetime}, #{mem_lastlogin_ip}, #{mem_is_admin}, #{mem_profile_content}, #{mem_adminmemo}, #{mem_photo})
	</insert>

<!--	이메일 코드삽입 -->
	<insert id="createMemberEmailCode">
		INSERT INTO member_auth_email VALUES (null, #{mem_id}, #{mae_key}, #{mae_type},
		                                      #{mae_generate_datetime}, null, #{mae_expired})

	</insert>

<!-- 	로그인 기록 변경 -->
	<update id="updateLoginMember">
		UPDATE member SET mem_lastlogin_datetime = #{mem_lastlogin_datetime}, mem_lastlogin_ip = #{mem_lastlogin_ip} WHERE mem_id = #{mem_id}
	</update>

<!--	이메일 코드 재전송-->
	<update id="updateMemberEmailCode">
		UPDATE member_auth_email SET mae_key = #{mae_key}, mae_generate_datetime = #{mae_generate_datetime} WHERE mem_id = #{mem_id}
	</update>

<!--	이메일 인증 완료-->
	<update id="updateMemberEmailCert">
		UPDATE member SET mem_email_cert = 1 WHERE mem_id = #{mem_id}
	</update>

<!--	이메일 코드 폐기-->
	<update id="useMemberEmailCode">
		UPDATE member_auth_email SET mae_use_datetime = #{mae_use_datetime}, mae_expired = #{mae_expired} WHERE mem_id = #{mem_id}
	</update>

<!--	멤버 리스트 갯수-->
	<select id="getListCount" resultType="int">
		SELECT COUNT(mem_id) FROM member
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="sch_type != null">
				<choose>
					<when test="sch_type == 1">
						AND mem_userid LIKE CONCAT('%',#{sch_content},'%')
					</when>
					<when test="sch_type == 2">
						AND mem_nickname LIKE CONCAT('%',#{sch_content},'%')
					</when>
					<when test="sch_type == 3">
						AND mem_email LIKE CONCAT('%',#{sch_content},'%')
					</when>
				</choose>
			</if>
		</trim>
	</select>

<!--	멤버 리스트-->
	<select id="getMemberList" resultType="member">
		SELECT * FROM member
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="sch_type != null">
				<choose>
					<when test="sch_type == 1">
						AND mem_userid LIKE CONCAT('%',#{sch_content},'%')
					</when>
					<when test="sch_type == 2">
						AND mem_nickname = LIKE CONCAT('%',#{sch_content},'%')
					</when>
					<when test="sch_type == 3">
						AND mem_email LIKE CONCAT('%',#{sch_content},'%')
					</when>
				</choose>
			</if>
			<if test="denied == 0">
				AND mem_denied != 1
			</if>
		</trim>
		ORDER BY mem_id DESC
		LIMIT #{pageBean.startRow},#{pageBean.pageSize};
	</select>
</mapper>
